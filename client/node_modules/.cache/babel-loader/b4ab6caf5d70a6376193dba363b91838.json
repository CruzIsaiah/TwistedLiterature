{"ast":null,"code":"var _jsxFileName = \"/Users/zay/Desktop/TwistedLiterature/client/src/pages/EditPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { db } from \"../config/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPost = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState({\n    id: null,\n    title: \"\",\n    description: \"\"\n  }); // Fetch post data based on ID from Firestore\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const postDoc = await getDoc(doc(db, \"posts\", id));\n\n        if (postDoc.exists()) {\n          const postData = postDoc.data();\n          setPost({\n            id: postDoc.id,\n            title: postData.title,\n            description: postData.description\n          });\n        } else {\n          console.log(\"No such document!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching post:\", error);\n      }\n    };\n\n    fetchPost();\n  }, [id]); // Run effect whenever the ID parameter changes\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setPost(prev => ({ ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const postRef = doc(db, \"posts\", id);\n      await updateDoc(postRef, {\n        title: post.title,\n        description: post.description\n      });\n      console.log(\"Post updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating post:\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 46\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        name: \"title\",\n        value: post.title,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 58\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"15\",\n        cols: \"50\",\n        id: \"description\",\n        name: \"description\",\n        value: post.description,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"deleteButton\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditPost, \"2XtQJz2Iq4JTTDodPdZ2r8+PVDk=\", false, function () {\n  return [useParams];\n});\n\n_c = EditPost;\nexport default EditPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","doc","getDoc","updateDoc","db","EditPost","id","post","setPost","title","description","fetchPost","postDoc","exists","postData","data","console","log","error","handleChange","event","name","value","target","prev","handleSubmit","preventDefault","postRef"],"sources":["/Users/zay/Desktop/TwistedLiterature/client/src/pages/EditPost.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { db } from \"../config/firebase\";\n\nconst EditPost = () => {\n  const { id } = useParams();\n  const [post, setPost] = useState({\n    id: null,\n    title: \"\",\n    description: \"\",\n  });\n\n  // Fetch post data based on ID from Firestore\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const postDoc = await getDoc(doc(db, \"posts\", id));\n        if (postDoc.exists()) {\n          const postData = postDoc.data();\n          setPost({\n            id: postDoc.id,\n            title: postData.title,\n            description: postData.description,\n          });\n        } else {\n          console.log(\"No such document!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching post:\", error);\n      }\n    };\n\n    fetchPost();\n  }, [id]); // Run effect whenever the ID parameter changes\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setPost((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const postRef = doc(db, \"posts\", id);\n      await updateDoc(postRef, {\n        title: post.title,\n        description: post.description,\n      });\n      console.log(\"Post updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating post:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"title\">Title</label> <br />\n        <input\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          value={post.title}\n          onChange={handleChange}\n        />\n        <br />\n        <br />\n        <br />\n        <label htmlFor=\"description\">Description</label> <br />\n        <textarea\n          rows=\"15\"\n          cols=\"50\"\n          id=\"description\"\n          name=\"description\"\n          value={post.description}\n          onChange={handleChange}\n        ></textarea>\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n        <button className=\"deleteButton\">Delete</button>\n      </form>\n    </div>\n  );\n};\n\nexport default EditPost;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}