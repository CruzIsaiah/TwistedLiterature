{"ast":null,"code":"var _jsxFileName = \"/Users/zay/TwistedLiterature/client/src/pages/ViewPost.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewPost = () => {\n  _s();\n\n  // Assuming you're using React Router to get the post ID from the URL\n  const {\n    id\n  } = useParams(); // Sample post data (replace with actual data fetching logic)\n\n  const postData = {\n    id: id,\n    title: \"Sample Post Title\",\n    author: \"Anonymous\",\n    description: \"This is a sample post description.\",\n    date: new Date()\n  }; // Function to format the timestamp into a human-readable date and time\n\n  const formattedDate = date => {\n    if (date && date.seconds) {\n      const postDate = new Date(date.seconds * 1000);\n      const dateString = postDate.toLocaleDateString();\n      const timeString = postDate.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      });\n      return `${dateString} ${timeString}`;\n    }\n\n    return \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: postData.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"author\",\n      children: \"by \" + postData.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"description\",\n      children: postData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"datePosted\",\n      children: formattedDate(postData.date)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewPost, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n\n_c = ViewPost;\nexport default ViewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewPost\");","map":{"version":3,"names":["React","useParams","ViewPost","id","postData","title","author","description","date","Date","formattedDate","seconds","postDate","dateString","toLocaleDateString","timeString","toLocaleTimeString","hour","minute"],"sources":["/Users/zay/TwistedLiterature/client/src/pages/ViewPost.js"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst ViewPost = () => {\n  // Assuming you're using React Router to get the post ID from the URL\n  const { id } = useParams();\n\n  // Sample post data (replace with actual data fetching logic)\n  const postData = {\n    id: id,\n    title: \"Sample Post Title\",\n    author: \"Anonymous\",\n    description: \"This is a sample post description.\",\n    date: new Date(),\n  };\n\n  // Function to format the timestamp into a human-readable date and time\n  const formattedDate = (date) => {\n    if (date && date.seconds) {\n      const postDate = new Date(date.seconds * 1000);\n      const dateString = postDate.toLocaleDateString();\n      const timeString = postDate.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n      return `${dateString} ${timeString}`;\n    }\n    return \"\";\n  };\n\n  return (\n    <div className=\"Card\">\n      <h2 className=\"title\">{postData.title}</h2>\n      <h3 className=\"author\">{\"by \" + postData.author}</h3>\n      <p className=\"description\">{postData.description}</p>\n      <p className=\"datePosted\">{formattedDate(postData.date)}</p>\n    </div>\n  );\n};\n\nexport default ViewPost;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACrB;EACA,MAAM;IAAEC;EAAF,IAASF,SAAS,EAAxB,CAFqB,CAIrB;;EACA,MAAMG,QAAQ,GAAG;IACfD,EAAE,EAAEA,EADW;IAEfE,KAAK,EAAE,mBAFQ;IAGfC,MAAM,EAAE,WAHO;IAIfC,WAAW,EAAE,oCAJE;IAKfC,IAAI,EAAE,IAAIC,IAAJ;EALS,CAAjB,CALqB,CAarB;;EACA,MAAMC,aAAa,GAAIF,IAAD,IAAU;IAC9B,IAAIA,IAAI,IAAIA,IAAI,CAACG,OAAjB,EAA0B;MACxB,MAAMC,QAAQ,GAAG,IAAIH,IAAJ,CAASD,IAAI,CAACG,OAAL,GAAe,IAAxB,CAAjB;MACA,MAAME,UAAU,GAAGD,QAAQ,CAACE,kBAAT,EAAnB;MACA,MAAMC,UAAU,GAAGH,QAAQ,CAACI,kBAAT,CAA4B,EAA5B,EAAgC;QACjDC,IAAI,EAAE,SAD2C;QAEjDC,MAAM,EAAE;MAFyC,CAAhC,CAAnB;MAIA,OAAQ,GAAEL,UAAW,IAAGE,UAAW,EAAnC;IACD;;IACD,OAAO,EAAP;EACD,CAXD;;EAaA,oBACE;IAAK,SAAS,EAAC,MAAf;IAAA,wBACE;MAAI,SAAS,EAAC,OAAd;MAAA,UAAuBX,QAAQ,CAACC;IAAhC;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAI,SAAS,EAAC,QAAd;MAAA,UAAwB,QAAQD,QAAQ,CAACE;IAAzC;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAG,SAAS,EAAC,aAAb;MAAA,UAA4BF,QAAQ,CAACG;IAArC;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE;MAAG,SAAS,EAAC,YAAb;MAAA,UAA2BG,aAAa,CAACN,QAAQ,CAACI,IAAV;IAAxC;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAQD,CAnCD;;GAAMN,Q;UAEWD,S;;;KAFXC,Q;AAqCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}