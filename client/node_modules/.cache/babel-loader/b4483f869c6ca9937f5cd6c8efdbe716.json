{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\nimport { useState, useEffect } from \"react\"; // Import useState and useEffect from React\n// Your Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-Q8arn88z92s5rO1XQT0fxjLgx4P2yFw\",\n  authDomain: \"twisted-literature.firebaseapp.com\",\n  projectId: \"twisted-literature\",\n  storageBucket: \"twisted-literature.appspot.com\",\n  messagingSenderId: \"439936251843\",\n  appId: \"1:439936251843:web:e484b2ae42c848cd6e2f76\",\n  measurementId: \"G-XBQMK29HLJ\"\n};\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const googleProvider = new GoogleAuthProvider();\nexport const db = getFirestore(app);\nexport const storage = getStorage(app); // Create a custom hook to track the authentication state\n\nexport const useAuth = () => {\n  _s();\n\n  const [user, setUser] = useState(null); // Initialize user state with null\n\n  useEffect(() => {\n    // Set up an authentication observer\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setUser(user); // Update the user state based on authentication changes\n    }); // Clean up the subscription to avoid memory leaks\n\n    return () => unsubscribe();\n  }, []); // Run this effect only once on component mount\n\n  return user; // Return the current user state\n};\n\n_s(useAuth, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","onAuthStateChanged","getFirestore","getStorage","useState","useEffect","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","googleProvider","db","storage","useAuth","user","setUser","unsubscribe"],"sources":["/Users/zay/TwistedLiterature/client/src/config/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\nimport { useState, useEffect } from \"react\"; // Import useState and useEffect from React\n\n// Your Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-Q8arn88z92s5rO1XQT0fxjLgx4P2yFw\",\n  authDomain: \"twisted-literature.firebaseapp.com\",\n  projectId: \"twisted-literature\",\n  storageBucket: \"twisted-literature.appspot.com\",\n  messagingSenderId: \"439936251843\",\n  appId: \"1:439936251843:web:e484b2ae42c848cd6e2f76\",\n  measurementId: \"G-XBQMK29HLJ\",\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const googleProvider = new GoogleAuthProvider();\n\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\n\n// Create a custom hook to track the authentication state\nexport const useAuth = () => {\n  const [user, setUser] = useState(null); // Initialize user state with null\n\n  useEffect(() => {\n    // Set up an authentication observer\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setUser(user); // Update the user state based on authentication changes\n    });\n\n    // Clean up the subscription to avoid memory leaks\n    return () => unsubscribe();\n  }, []); // Run this effect only once on component mount\n\n  return user; // Return the current user state\n};\n"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,EAAkBC,kBAAlB,EAAsCC,kBAAtC,QAAgE,eAAhE;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAA6C;AAE7C;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,oCAFS;EAGrBC,SAAS,EAAE,oBAHU;EAIrBC,aAAa,EAAE,gCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE,2CANc;EAOrBC,aAAa,EAAE;AAPM,CAAvB;AAUA,MAAMC,GAAG,GAAGhB,aAAa,CAACQ,cAAD,CAAzB;AACA,OAAO,MAAMS,IAAI,GAAGhB,OAAO,CAACe,GAAD,CAApB;AACP,OAAO,MAAME,cAAc,GAAG,IAAIhB,kBAAJ,EAAvB;AAEP,OAAO,MAAMiB,EAAE,GAAGf,YAAY,CAACY,GAAD,CAAvB;AACP,OAAO,MAAMI,OAAO,GAAGf,UAAU,CAACW,GAAD,CAA1B,C,CAEP;;AACA,OAAO,MAAMK,OAAO,GAAG,MAAM;EAAA;;EAC3B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,IAAD,CAAhC,CAD2B,CACa;;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,WAAW,GAAGrB,kBAAkB,CAACc,IAAD,EAAQK,IAAD,IAAU;MACrDC,OAAO,CAACD,IAAD,CAAP,CADqD,CACtC;IAChB,CAFqC,CAAtC,CAFc,CAMd;;IACA,OAAO,MAAME,WAAW,EAAxB;EACD,CARQ,EAQN,EARM,CAAT,CAH2B,CAWnB;;EAER,OAAOF,IAAP,CAb2B,CAad;AACd,CAdM;;GAAMD,O"},"metadata":{},"sourceType":"module"}