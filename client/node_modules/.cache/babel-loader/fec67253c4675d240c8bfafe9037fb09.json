{"ast":null,"code":"var _jsxFileName = \"/Users/zay/Desktop/TwistedLiterature/client/src/pages/ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../components/Card\";\nimport { db } from \"../config/firebase\"; // Import db directly from firebase.js\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Perform database query\n        const querySnapshot = await db.collection(\"posts\").get(); // Extract data from querySnapshot and store it in a temporary array\n\n        const tempPosts = [];\n        querySnapshot.forEach(doc => {\n          tempPosts.push({\n            id: doc.id,\n            ...doc.data()\n          });\n        }); // Update state variable with retrieved data\n\n        setPosts(tempPosts);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    }; // Call fetchData function when component mounts\n\n\n    fetchData(); // Cleanup function (optional)\n\n    return () => {// Cleanup code (if any)\n    };\n  }, []); // Empty dependency array ensures the effect runs only once, similar to componentDidMount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    children: posts && posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        id: post.id,\n        title: post.title,\n        author: post.author,\n        description: post.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No Challenges Yet ðŸ˜ž\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReadPosts, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Card","db","ReadPosts","posts","setPosts","fetchData","querySnapshot","collection","get","tempPosts","forEach","doc","push","id","data","error","console","display","flexDirection","length","map","post","marginBottom","title","author","description"],"sources":["/Users/zay/Desktop/TwistedLiterature/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"../components/Card\";\nimport { db } from \"../config/firebase\"; // Import db directly from firebase.js\n\nconst ReadPosts = () => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Perform database query\n        const querySnapshot = await db.collection(\"posts\").get();\n        // Extract data from querySnapshot and store it in a temporary array\n        const tempPosts = [];\n        querySnapshot.forEach((doc) => {\n          tempPosts.push({ id: doc.id, ...doc.data() });\n        });\n        // Update state variable with retrieved data\n        setPosts(tempPosts);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    // Call fetchData function when component mounts\n    fetchData();\n\n    // Cleanup function (optional)\n    return () => {\n      // Cleanup code (if any)\n    };\n  }, []); // Empty dependency array ensures the effect runs only once, similar to componentDidMount\n\n  return (\n    <div className=\"ReadPosts\" style={{ display: \"flex\", flexDirection: \"column\" }}>\n      {posts && posts.length > 0 ? (\n        posts.map((post) => (\n          <div key={post.id} style={{ marginBottom: \"20px\" }}>\n            <Card\n              id={post.id}\n              title={post.title}\n              author={post.author}\n              description={post.description}\n            />\n          </div>\n        ))\n      ) : (\n        <h2>{\"No Challenges Yet ðŸ˜ž\"}</h2>\n      )}\n    </div>\n  );\n};\n\nexport default ReadPosts;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,EAAT,QAAmB,oBAAnB,C,CAAyC;;;;AAEzC,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMM,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF;QACA,MAAMC,aAAa,GAAG,MAAML,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuBC,GAAvB,EAA5B,CAFE,CAGF;;QACA,MAAMC,SAAS,GAAG,EAAlB;QACAH,aAAa,CAACI,OAAd,CAAuBC,GAAD,IAAS;UAC7BF,SAAS,CAACG,IAAV,CAAe;YAAEC,EAAE,EAAEF,GAAG,CAACE,EAAV;YAAc,GAAGF,GAAG,CAACG,IAAJ;UAAjB,CAAf;QACD,CAFD,EALE,CAQF;;QACAV,QAAQ,CAACK,SAAD,CAAR;MACD,CAVD,CAUE,OAAOM,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;MACD;IACF,CAdD,CADc,CAiBd;;;IACAV,SAAS,GAlBK,CAoBd;;IACA,OAAO,MAAM,CACX;IACD,CAFD;EAGD,CAxBQ,EAwBN,EAxBM,CAAT,CAHsB,CA2Bd;;EAER,oBACE;IAAK,SAAS,EAAC,WAAf;IAA2B,KAAK,EAAE;MAAEY,OAAO,EAAE,MAAX;MAAmBC,aAAa,EAAE;IAAlC,CAAlC;IAAA,UACGf,KAAK,IAAIA,KAAK,CAACgB,MAAN,GAAe,CAAxB,GACChB,KAAK,CAACiB,GAAN,CAAWC,IAAD,iBACR;MAAmB,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAhB,CAA1B;MAAA,uBACE,QAAC,IAAD;QACE,EAAE,EAAED,IAAI,CAACR,EADX;QAEE,KAAK,EAAEQ,IAAI,CAACE,KAFd;QAGE,MAAM,EAAEF,IAAI,CAACG,MAHf;QAIE,WAAW,EAAEH,IAAI,CAACI;MAJpB;QAAA;QAAA;QAAA;MAAA;IADF,GAAUJ,IAAI,CAACR,EAAf;MAAA;MAAA;MAAA;IAAA,QADF,CADD,gBAYC;MAAA,UAAK;IAAL;MAAA;MAAA;MAAA;IAAA;EAbJ;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD,CA/CD;;GAAMX,S;;KAAAA,S;AAiDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}