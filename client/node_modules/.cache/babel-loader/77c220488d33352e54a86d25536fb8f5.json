{"ast":null,"code":"var _jsxFileName = \"/Users/zay/TwistedLiterature/client/src/pages/ViewPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Comment from \"../components/Comment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewPost = () => {\n  _s();\n\n  const {\n    id\n  } = useParams(); // Get the post ID from the URL\n\n  const [post, setPost] = useState(null); // State to store the post data\n  // Sample function to fetch post data (replace with actual data fetching logic)\n\n  const fetchPostData = async postId => {\n    try {\n      // Perform a fetch request to retrieve the post data based on the ID\n      const response = await fetch(`your-api-endpoint/posts/${postId}`);\n      const data = await response.json();\n      setPost(data); // Set the fetched post data to the state\n    } catch (error) {\n      console.error(\"Error fetching post data:\", error);\n    }\n  }; // useEffect hook to fetch post data when the component mounts\n\n\n  useEffect(() => {\n    fetchPostData(id); // Fetch post data when the component mounts\n  }, [id]); // Run the effect whenever the ID parameter changes\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this); // Display loading indicator while fetching data\n  } // Function to format the timestamp into a human-readable date and time\n\n\n  const formattedDate = date => {\n    if (date && date.seconds) {\n      const postDate = new Date(date.seconds * 1000);\n      const dateString = postDate.toLocaleDateString();\n      const timeString = postDate.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      });\n      return `${dateString} ${timeString}`;\n    }\n\n    return \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"author\",\n      children: \"by \" + post.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"description\",\n      children: post.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"datePosted\",\n      children: formattedDate(post.date)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewPost, \"6+b5eOm0C2EIwwbuXxVLhmPamew=\", false, function () {\n  return [useParams];\n});\n\n_c = ViewPost;\nexport default ViewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Comment","ViewPost","id","post","setPost","fetchPostData","postId","response","fetch","data","json","error","console","formattedDate","date","seconds","postDate","Date","dateString","toLocaleDateString","timeString","toLocaleTimeString","hour","minute","title","author","description"],"sources":["/Users/zay/TwistedLiterature/client/src/pages/ViewPost.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Comment from \"../components/Comment\";\n\nconst ViewPost = () => {\n  const { id } = useParams(); // Get the post ID from the URL\n  const [post, setPost] = useState(null); // State to store the post data\n\n  // Sample function to fetch post data (replace with actual data fetching logic)\n  const fetchPostData = async (postId) => {\n    try {\n      // Perform a fetch request to retrieve the post data based on the ID\n      const response = await fetch(`your-api-endpoint/posts/${postId}`);\n      const data = await response.json();\n      setPost(data); // Set the fetched post data to the state\n    } catch (error) {\n      console.error(\"Error fetching post data:\", error);\n    }\n  };\n\n  // useEffect hook to fetch post data when the component mounts\n  useEffect(() => {\n    fetchPostData(id); // Fetch post data when the component mounts\n  }, [id]); // Run the effect whenever the ID parameter changes\n\n  if (!post) {\n    return <div>Loading...</div>; // Display loading indicator while fetching data\n  }\n\n  // Function to format the timestamp into a human-readable date and time\n  const formattedDate = (date) => {\n    if (date && date.seconds) {\n      const postDate = new Date(date.seconds * 1000);\n      const dateString = postDate.toLocaleDateString();\n      const timeString = postDate.toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n      return `${dateString} ${timeString}`;\n    }\n    return \"\";\n  };\n\n  return (\n    <div className=\"PostCard\">\n      <h2 className=\"title\">{post.title}</h2>\n      <h3 className=\"author\">{\"by \" + post.author}</h3>\n      <p className=\"description\">{post.description}</p>\n      <p className=\"datePosted\">{formattedDate(post.date)}</p>\n      {/* Add upvote button and comments section if needed */}\n      {/* Example: <button onClick={handleUpvote}>Upvote</button> */}\n      {/* Example: <CommentSection postId={id} /> */}\n    </div>\n  );\n};\n\nexport default ViewPost;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACrB,MAAM;IAAEC;EAAF,IAASH,SAAS,EAAxB,CADqB,CACO;;EAC5B,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC,CAFqB,CAEmB;EAExC;;EACA,MAAMQ,aAAa,GAAG,MAAOC,MAAP,IAAkB;IACtC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,2BAA0BF,MAAO,EAAnC,CAA5B;MACA,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;MACAN,OAAO,CAACK,IAAD,CAAP,CAJE,CAIa;IAChB,CALD,CAKE,OAAOE,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;IACD;EACF,CATD,CALqB,CAgBrB;;;EACAb,SAAS,CAAC,MAAM;IACdO,aAAa,CAACH,EAAD,CAAb,CADc,CACK;EACpB,CAFQ,EAEN,CAACA,EAAD,CAFM,CAAT,CAjBqB,CAmBX;;EAEV,IAAI,CAACC,IAAL,EAAW;IACT,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP,CADS,CACqB;EAC/B,CAvBoB,CAyBrB;;;EACA,MAAMU,aAAa,GAAIC,IAAD,IAAU;IAC9B,IAAIA,IAAI,IAAIA,IAAI,CAACC,OAAjB,EAA0B;MACxB,MAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAASH,IAAI,CAACC,OAAL,GAAe,IAAxB,CAAjB;MACA,MAAMG,UAAU,GAAGF,QAAQ,CAACG,kBAAT,EAAnB;MACA,MAAMC,UAAU,GAAGJ,QAAQ,CAACK,kBAAT,CAA4B,EAA5B,EAAgC;QACjDC,IAAI,EAAE,SAD2C;QAEjDC,MAAM,EAAE;MAFyC,CAAhC,CAAnB;MAIA,OAAQ,GAAEL,UAAW,IAAGE,UAAW,EAAnC;IACD;;IACD,OAAO,EAAP;EACD,CAXD;;EAaA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAI,SAAS,EAAC,OAAd;MAAA,UAAuBjB,IAAI,CAACqB;IAA5B;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAI,SAAS,EAAC,QAAd;MAAA,UAAwB,QAAQrB,IAAI,CAACsB;IAArC;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAG,SAAS,EAAC,aAAb;MAAA,UAA4BtB,IAAI,CAACuB;IAAjC;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE;MAAG,SAAS,EAAC,YAAb;MAAA,UAA2Bb,aAAa,CAACV,IAAI,CAACW,IAAN;IAAxC;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CAlDD;;GAAMb,Q;UACWF,S;;;KADXE,Q;AAoDN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}