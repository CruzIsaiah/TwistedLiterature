{"ast":null,"code":"// import { initializeApp } from \"firebase/app\";\n// import { getAuth, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\n// import { getFirestore, collection, doc, getDoc } from \"firebase/firestore\"; // Updated import\n// import { getStorage } from \"firebase/storage\";\n// import { useState, useEffect } from \"react\";\n// // Your Firebase configuration\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyB-Q8arn88z92s5rO1XQT0fxjLgx4P2yFw\",\n//   authDomain: \"twisted-literature.firebaseapp.com\",\n//   projectId: \"twisted-literature\",\n//   storageBucket: \"twisted-literature.appspot.com\",\n//   messagingSenderId: \"439936251843\",\n//   appId: \"1:439936251843:web:e484b2ae42c848cd6e2f76\",\n//   measurementId: \"G-XBQMK29HLJ\",\n// };\n// const app = initializeApp(firebaseConfig);\n// export const auth = getAuth(app);\n// export const googleProvider = new GoogleAuthProvider();\n// export const db = getFirestore(app);\n// export const storage = getStorage(app);\n// // Create a custom hook to track the authentication state\n// export const useAuth = () => {\n//   const [user, setUser] = useState(null);\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, (user) => {\n//       setUser(user);\n//     });\n//     return () => unsubscribe();\n//   }, []);\n//   return user;\n// };\n// // Function to fetch username from Firestore based on the user's email\n// export const fetchUsername = async (email) => {\n//   try {\n//     const userDoc = await getDoc(doc(collection(db, \"users\"), email));\n//     if (userDoc.exists()) {\n//       const userData = userDoc.data();\n//       return userData.username;\n//     } else {\n//       console.error(\"User document not found\");\n//       return null;\n//     }\n//   } catch (error) {\n//     console.error(\"Error fetching username:\", error);\n//     return null;\n//   }\n// };","map":{"version":3,"names":[],"sources":["/Users/zay/TwistedLiterature/client/src/config/firebase.js"],"sourcesContent":["// import { initializeApp } from \"firebase/app\";\n// import { getAuth, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\n// import { getFirestore, collection, doc, getDoc } from \"firebase/firestore\"; // Updated import\n// import { getStorage } from \"firebase/storage\";\n// import { useState, useEffect } from \"react\";\n\n// // Your Firebase configuration\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyB-Q8arn88z92s5rO1XQT0fxjLgx4P2yFw\",\n//   authDomain: \"twisted-literature.firebaseapp.com\",\n//   projectId: \"twisted-literature\",\n//   storageBucket: \"twisted-literature.appspot.com\",\n//   messagingSenderId: \"439936251843\",\n//   appId: \"1:439936251843:web:e484b2ae42c848cd6e2f76\",\n//   measurementId: \"G-XBQMK29HLJ\",\n// };\n\n// const app = initializeApp(firebaseConfig);\n// export const auth = getAuth(app);\n// export const googleProvider = new GoogleAuthProvider();\n\n// export const db = getFirestore(app);\n// export const storage = getStorage(app);\n\n// // Create a custom hook to track the authentication state\n// export const useAuth = () => {\n//   const [user, setUser] = useState(null);\n\n//   useEffect(() => {\n//     const unsubscribe = onAuthStateChanged(auth, (user) => {\n//       setUser(user);\n//     });\n\n//     return () => unsubscribe();\n//   }, []);\n\n//   return user;\n// };\n\n// // Function to fetch username from Firestore based on the user's email\n// export const fetchUsername = async (email) => {\n//   try {\n//     const userDoc = await getDoc(doc(collection(db, \"users\"), email));\n//     if (userDoc.exists()) {\n//       const userData = userDoc.data();\n//       return userData.username;\n//     } else {\n//       console.error(\"User document not found\");\n//       return null;\n//     }\n//   } catch (error) {\n//     console.error(\"Error fetching username:\", error);\n//     return null;\n//   }\n// };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}