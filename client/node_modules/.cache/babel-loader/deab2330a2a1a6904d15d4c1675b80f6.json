{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, collection, doc, getDoc } from \"firebase/firestore\"; // Updated import\n\nimport { getStorage } from \"firebase/storage\";\nimport { useState, useEffect } from \"react\"; // Your Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-Q8arn88z92s5rO1XQT0fxjLgx4P2yFw\",\n  authDomain: \"twisted-literature.firebaseapp.com\",\n  projectId: \"twisted-literature\",\n  storageBucket: \"twisted-literature.appspot.com\",\n  messagingSenderId: \"439936251843\",\n  appId: \"1:439936251843:web:e484b2ae42c848cd6e2f76\",\n  measurementId: \"G-XBQMK29HLJ\"\n};\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const googleProvider = new GoogleAuthProvider();\nexport const db = getFirestore(app);\nexport const storage = getStorage(app); // Create a custom hook to track the authentication state\n\nexport const useAuth = () => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setUser(user);\n    });\n    return () => unsubscribe();\n  }, []);\n  return user;\n}; // Function to fetch username from Firestore based on the user's email\n\n_s(useAuth, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n\nexport const fetchUsername = async email => {\n  try {\n    const userDoc = await getDoc(doc(collection(db, \"users\"), email));\n\n    if (userDoc.exists()) {\n      const userData = userDoc.data();\n      return userData.username;\n    } else {\n      console.error(\"User document not found\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching username:\", error);\n    return null;\n  }\n};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","onAuthStateChanged","getFirestore","collection","doc","getDoc","getStorage","useState","useEffect","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","googleProvider","db","storage","useAuth","user","setUser","unsubscribe","fetchUsername","email","userDoc","exists","userData","data","username","console","error"],"sources":["/Users/zay/TwistedLiterature/client/src/config/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, collection, doc, getDoc } from \"firebase/firestore\"; // Updated import\nimport { getStorage } from \"firebase/storage\";\nimport { useState, useEffect } from \"react\";\n\n// Your Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB-Q8arn88z92s5rO1XQT0fxjLgx4P2yFw\",\n  authDomain: \"twisted-literature.firebaseapp.com\",\n  projectId: \"twisted-literature\",\n  storageBucket: \"twisted-literature.appspot.com\",\n  messagingSenderId: \"439936251843\",\n  appId: \"1:439936251843:web:e484b2ae42c848cd6e2f76\",\n  measurementId: \"G-XBQMK29HLJ\",\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const googleProvider = new GoogleAuthProvider();\n\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\n\n// Create a custom hook to track the authentication state\nexport const useAuth = () => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setUser(user);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return user;\n};\n\n// Function to fetch username from Firestore based on the user's email\nexport const fetchUsername = async (email) => {\n  try {\n    const userDoc = await getDoc(doc(collection(db, \"users\"), email));\n    if (userDoc.exists()) {\n      const userData = userDoc.data();\n      return userData.username;\n    } else {\n      console.error(\"User document not found\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching username:\", error);\n    return null;\n  }\n};\n"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,EAAkBC,kBAAlB,EAAsCC,kBAAtC,QAAgE,eAAhE;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,GAAnC,EAAwCC,MAAxC,QAAsD,oBAAtD,C,CAA4E;;AAC5E,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,oCAFS;EAGrBC,SAAS,EAAE,oBAHU;EAIrBC,aAAa,EAAE,gCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE,2CANc;EAOrBC,aAAa,EAAE;AAPM,CAAvB;AAUA,MAAMC,GAAG,GAAGnB,aAAa,CAACW,cAAD,CAAzB;AACA,OAAO,MAAMS,IAAI,GAAGnB,OAAO,CAACkB,GAAD,CAApB;AACP,OAAO,MAAME,cAAc,GAAG,IAAInB,kBAAJ,EAAvB;AAEP,OAAO,MAAMoB,EAAE,GAAGlB,YAAY,CAACe,GAAD,CAAvB;AACP,OAAO,MAAMI,OAAO,GAAGf,UAAU,CAACW,GAAD,CAA1B,C,CAEP;;AACA,OAAO,MAAMK,OAAO,GAAG,MAAM;EAAA;;EAC3B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,IAAD,CAAhC;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMiB,WAAW,GAAGxB,kBAAkB,CAACiB,IAAD,EAAQK,IAAD,IAAU;MACrDC,OAAO,CAACD,IAAD,CAAP;IACD,CAFqC,CAAtC;IAIA,OAAO,MAAME,WAAW,EAAxB;EACD,CANQ,EAMN,EANM,CAAT;EAQA,OAAOF,IAAP;AACD,CAZM,C,CAcP;;GAdaD,O;;AAeb,OAAO,MAAMI,aAAa,GAAG,MAAOC,KAAP,IAAiB;EAC5C,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMvB,MAAM,CAACD,GAAG,CAACD,UAAU,CAACiB,EAAD,EAAK,OAAL,CAAX,EAA0BO,KAA1B,CAAJ,CAA5B;;IACA,IAAIC,OAAO,CAACC,MAAR,EAAJ,EAAsB;MACpB,MAAMC,QAAQ,GAAGF,OAAO,CAACG,IAAR,EAAjB;MACA,OAAOD,QAAQ,CAACE,QAAhB;IACD,CAHD,MAGO;MACLC,OAAO,CAACC,KAAR,CAAc,yBAAd;MACA,OAAO,IAAP;IACD;EACF,CATD,CASE,OAAOA,KAAP,EAAc;IACdD,OAAO,CAACC,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;IACA,OAAO,IAAP;EACD;AACF,CAdM"},"metadata":{},"sourceType":"module"}