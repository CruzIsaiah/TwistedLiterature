{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { doc, getDoc, updateDoc, collection, addDoc, serverTimestamp, query, orderBy } from \"firebase/firestore\";\nimport { db } from \"../config/firebase\";\n\nconst ViewPost = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [upvotes, setUpvotes] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]); // Fetch post data and upvotes count based on ID from Firestore\n\n  useEffect(() => {\n    const fetchPostData = async () => {\n      try {\n        const postDoc = await getDoc(doc(db, \"posts\", id));\n\n        if (postDoc.exists()) {\n          const postData = postDoc.data();\n          setPost(postData);\n          setUpvotes(postData.upvotes); // Set upvotes count from database\n        } else {\n          console.log(\"No such document!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching post data:\", error);\n      }\n    };\n\n    fetchPostData();\n  }, [id]); // Run effect whenever the ID parameter changes\n  // Fetch comments from Firestore and order them by date\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const commentsCollection = collection(db, `posts/${id}/comments`);\n        const commentsQuery = query(commentsCollection, orderBy(\"timestamp\", \"asc\"));\n        const commentsSnapshot = await getDocs(commentsQuery);\n        const fetchedComments = commentsSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setComments(fetchedComments);\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    };\n\n    if (id) {\n      fetchComments();\n    }\n  }, [id]); // Remaining code remains the same...\n};\n\n_s(ViewPost, \"F62fqBS5NPPDD4rkNG2rjGf5/Lc=\", false, function () {\n  return [useParams];\n});\n\n_c = ViewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","doc","getDoc","updateDoc","collection","addDoc","serverTimestamp","query","orderBy","db","ViewPost","id","post","setPost","upvotes","setUpvotes","comment","setComment","comments","setComments","fetchPostData","postDoc","exists","postData","data","console","log","error","fetchComments","commentsCollection","commentsQuery","commentsSnapshot","getDocs","fetchedComments","docs","map"],"sources":["/Users/zay/TwistedLiterature/client/src/pages/ViewPost.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { doc, getDoc, updateDoc, collection, addDoc, serverTimestamp, query, orderBy } from \"firebase/firestore\";\nimport { db } from \"../config/firebase\";\n\nconst ViewPost = () => {\n  const { id } = useParams();\n  const [post, setPost] = useState(null);\n  const [upvotes, setUpvotes] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]);\n\n  // Fetch post data and upvotes count based on ID from Firestore\n  useEffect(() => {\n    const fetchPostData = async () => {\n      try {\n        const postDoc = await getDoc(doc(db, \"posts\", id));\n        if (postDoc.exists()) {\n          const postData = postDoc.data();\n          setPost(postData);\n          setUpvotes(postData.upvotes); // Set upvotes count from database\n        } else {\n          console.log(\"No such document!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching post data:\", error);\n      }\n    };\n\n    fetchPostData();\n  }, [id]); // Run effect whenever the ID parameter changes\n\n  // Fetch comments from Firestore and order them by date\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const commentsCollection = collection(db, `posts/${id}/comments`);\n        const commentsQuery = query(commentsCollection, orderBy(\"timestamp\", \"asc\"));\n        const commentsSnapshot = await getDocs(commentsQuery);\n        const fetchedComments = commentsSnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setComments(fetchedComments);\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    };\n\n    if (id) {\n      fetchComments();\n    }\n  }, [id]);\n\n  // Remaining code remains the same...\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,EAAiCC,UAAjC,EAA6CC,MAA7C,EAAqDC,eAArD,EAAsEC,KAAtE,EAA6EC,OAA7E,QAA4F,oBAA5F;AACA,SAASC,EAAT,QAAmB,oBAAnB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACrB,MAAM;IAAEC;EAAF,IAASX,SAAS,EAAxB;EACA,MAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAxC,CALqB,CAOrB;;EACAC,SAAS,CAAC,MAAM;IACd,MAAMqB,aAAa,GAAG,YAAY;MAChC,IAAI;QACF,MAAMC,OAAO,GAAG,MAAMnB,MAAM,CAACD,GAAG,CAACQ,EAAD,EAAK,OAAL,EAAcE,EAAd,CAAJ,CAA5B;;QACA,IAAIU,OAAO,CAACC,MAAR,EAAJ,EAAsB;UACpB,MAAMC,QAAQ,GAAGF,OAAO,CAACG,IAAR,EAAjB;UACAX,OAAO,CAACU,QAAD,CAAP;UACAR,UAAU,CAACQ,QAAQ,CAACT,OAAV,CAAV,CAHoB,CAGU;QAC/B,CAJD,MAIO;UACLW,OAAO,CAACC,GAAR,CAAY,mBAAZ;QACD;MACF,CATD,CASE,OAAOC,KAAP,EAAc;QACdF,OAAO,CAACE,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;MACD;IACF,CAbD;;IAeAP,aAAa;EACd,CAjBQ,EAiBN,CAACT,EAAD,CAjBM,CAAT,CARqB,CAyBX;EAEV;;EACAZ,SAAS,CAAC,MAAM;IACd,MAAM6B,aAAa,GAAG,YAAY;MAChC,IAAI;QACF,MAAMC,kBAAkB,GAAGzB,UAAU,CAACK,EAAD,EAAM,SAAQE,EAAG,WAAjB,CAArC;QACA,MAAMmB,aAAa,GAAGvB,KAAK,CAACsB,kBAAD,EAAqBrB,OAAO,CAAC,WAAD,EAAc,KAAd,CAA5B,CAA3B;QACA,MAAMuB,gBAAgB,GAAG,MAAMC,OAAO,CAACF,aAAD,CAAtC;QACA,MAAMG,eAAe,GAAGF,gBAAgB,CAACG,IAAjB,CAAsBC,GAAtB,CAA2BlC,GAAD,KAAU;UAC1DU,EAAE,EAAEV,GAAG,CAACU,EADkD;UAE1D,GAAGV,GAAG,CAACuB,IAAJ;QAFuD,CAAV,CAA1B,CAAxB;QAIAL,WAAW,CAACc,eAAD,CAAX;MACD,CATD,CASE,OAAON,KAAP,EAAc;QACdF,OAAO,CAACE,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;MACD;IACF,CAbD;;IAeA,IAAIhB,EAAJ,EAAQ;MACNiB,aAAa;IACd;EACF,CAnBQ,EAmBN,CAACjB,EAAD,CAnBM,CAAT,CA5BqB,CAiDrB;AACD,CAlDD;;GAAMD,Q;UACWV,S;;;KADXU,Q"},"metadata":{},"sourceType":"module"}