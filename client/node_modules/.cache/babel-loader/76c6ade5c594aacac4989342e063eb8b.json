{"ast":null,"code":"var _jsxFileName = \"/Users/zay/TwistedLiterature/client/src/pages/ViewPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { db } from \"../config/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewPost = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [upvotes, setUpvotes] = useState(0); // Fetch post data and upvotes count based on ID from Firestore\n\n  useEffect(() => {\n    const fetchPostData = async () => {\n      try {\n        const postDoc = await getDoc(doc(db, \"posts\", id));\n\n        if (postDoc.exists()) {\n          const postData = postDoc.data();\n          setPost(postData);\n          setUpvotes(postData.upvotes); // Set upvotes count from database\n        } else {\n          console.log(\"No such document!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching post data:\", error);\n      }\n    };\n\n    fetchPostData();\n  }, [id]); // Run effect whenever the ID parameter changes\n\n  const updateUpvotes = async () => {\n    try {\n      // Update upvotes count in the database\n      await updateDoc(doc(db, \"posts\", id), {\n        upvotes: upvotes + 1\n      }); // Update the upvotes count in the UI\n\n      setUpvotes(count => count + 1);\n    } catch (error) {\n      console.error(\"Error updating upvotes count:\", error); // Handle error, e.g., display error message to the user\n    }\n  };\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this); // Display loading indicator while fetching data\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"author\",\n      children: \"by \" + post.authorId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"description\",\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upvoteButton\",\n      onClick: updateUpvotes,\n      children: [\"\\uD83D\\uDC4D Upvotes: \", upvotes]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewPost, \"UDp51YjJQKRIO9Z5+J6Z2/gHSPo=\", false, function () {\n  return [useParams];\n});\n\n_c = ViewPost;\nexport default ViewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","doc","getDoc","updateDoc","db","ViewPost","id","post","setPost","upvotes","setUpvotes","fetchPostData","postDoc","exists","postData","data","console","log","error","updateUpvotes","count","title","authorId","body"],"sources":["/Users/zay/TwistedLiterature/client/src/pages/ViewPost.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { db } from \"../config/firebase\";\n\nconst ViewPost = () => {\n  const { id } = useParams();\n  const [post, setPost] = useState(null);\n  const [upvotes, setUpvotes] = useState(0);\n\n  // Fetch post data and upvotes count based on ID from Firestore\n  useEffect(() => {\n    const fetchPostData = async () => {\n      try {\n        const postDoc = await getDoc(doc(db, \"posts\", id));\n        if (postDoc.exists()) {\n          const postData = postDoc.data();\n          setPost(postData);\n          setUpvotes(postData.upvotes); // Set upvotes count from database\n        } else {\n          console.log(\"No such document!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching post data:\", error);\n      }\n    };\n\n    fetchPostData();\n  }, [id]); // Run effect whenever the ID parameter changes\n\n  const updateUpvotes = async () => {\n    try {\n      // Update upvotes count in the database\n      await updateDoc(doc(db, \"posts\", id), {\n        upvotes: upvotes + 1,\n      });\n      // Update the upvotes count in the UI\n      setUpvotes((count) => count + 1);\n    } catch (error) {\n      console.error(\"Error updating upvotes count:\", error);\n      // Handle error, e.g., display error message to the user\n    }\n  };\n\n  if (!post) {\n    return <div>Loading...</div>; // Display loading indicator while fetching data\n  }\n\n  return (\n    <div className=\"PostCard\">\n      <h2 className=\"title\">{post.title}</h2>\n      <h3 className=\"author\">{\"by \" + post.authorId}</h3>\n      <p className=\"description\">{post.body}</p>\n      {/* <p className=\"datePosted\">{formattedDate(post.date)}</p> */}\n      <button className=\"upvoteButton\" onClick={updateUpvotes}>\n        üëç Upvotes: {upvotes}\n      </button>\n    </div>\n  );\n};\n\nexport default ViewPost;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,EAAT,QAAmB,oBAAnB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACrB,MAAM;IAAEC;EAAF,IAASN,SAAS,EAAxB;EACA,MAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,IAAD,CAAhC;EACA,MAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,CAAD,CAAtC,CAHqB,CAKrB;;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,aAAa,GAAG,YAAY;MAChC,IAAI;QACF,MAAMC,OAAO,GAAG,MAAMV,MAAM,CAACD,GAAG,CAACG,EAAD,EAAK,OAAL,EAAcE,EAAd,CAAJ,CAA5B;;QACA,IAAIM,OAAO,CAACC,MAAR,EAAJ,EAAsB;UACpB,MAAMC,QAAQ,GAAGF,OAAO,CAACG,IAAR,EAAjB;UACAP,OAAO,CAACM,QAAD,CAAP;UACAJ,UAAU,CAACI,QAAQ,CAACL,OAAV,CAAV,CAHoB,CAGU;QAC/B,CAJD,MAIO;UACLO,OAAO,CAACC,GAAR,CAAY,mBAAZ;QACD;MACF,CATD,CASE,OAAOC,KAAP,EAAc;QACdF,OAAO,CAACE,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;MACD;IACF,CAbD;;IAeAP,aAAa;EACd,CAjBQ,EAiBN,CAACL,EAAD,CAjBM,CAAT,CANqB,CAuBX;;EAEV,MAAMa,aAAa,GAAG,YAAY;IAChC,IAAI;MACF;MACA,MAAMhB,SAAS,CAACF,GAAG,CAACG,EAAD,EAAK,OAAL,EAAcE,EAAd,CAAJ,EAAuB;QACpCG,OAAO,EAAEA,OAAO,GAAG;MADiB,CAAvB,CAAf,CAFE,CAKF;;MACAC,UAAU,CAAEU,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAV;IACD,CAPD,CAOE,OAAOF,KAAP,EAAc;MACdF,OAAO,CAACE,KAAR,CAAc,+BAAd,EAA+CA,KAA/C,EADc,CAEd;IACD;EACF,CAZD;;EAcA,IAAI,CAACX,IAAL,EAAW;IACT,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP,CADS,CACqB;EAC/B;;EAED,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAI,SAAS,EAAC,OAAd;MAAA,UAAuBA,IAAI,CAACc;IAA5B;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAI,SAAS,EAAC,QAAd;MAAA,UAAwB,QAAQd,IAAI,CAACe;IAArC;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAG,SAAS,EAAC,aAAb;MAAA,UAA4Bf,IAAI,CAACgB;IAAjC;MAAA;MAAA;MAAA;IAAA,QAHF,eAKE;MAAQ,SAAS,EAAC,cAAlB;MAAiC,OAAO,EAAEJ,aAA1C;MAAA,qCACeV,OADf;IAAA;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CAtDD;;GAAMJ,Q;UACWL,S;;;KADXK,Q;AAwDN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}