{"ast":null,"code":"var _jsxFileName = \"/Users/zay/TwistedLiterature/client/src/pages/ViewPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { doc, getDoc, updateDoc, collection, addDoc, serverTimestamp, query, orderBy, getDocs } from \"firebase/firestore\";\nimport { db } from \"../config/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewPost = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [upvotes, setUpvotes] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]); // Fetch post data and upvotes count based on ID from Firestore\n\n  useEffect(() => {\n    const fetchPostData = async () => {\n      try {\n        const postDoc = await getDoc(doc(db, \"posts\", id));\n\n        if (postDoc.exists()) {\n          const postData = postDoc.data();\n          setPost(postData);\n          setUpvotes(postData.upvotes); // Set upvotes count from database\n        } else {\n          console.log(\"No such document!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching post data:\", error);\n      }\n    };\n\n    fetchPostData();\n  }, [id]); // Run effect whenever the ID parameter changes\n  // Fetch comments from Firestore and order them by date\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const commentsCollection = collection(db, `posts/${id}/comments`);\n        const commentsQuery = query(commentsCollection, orderBy(\"timestamp\", \"asc\"));\n        const commentsSnapshot = await getDocs(commentsQuery);\n        const fetchedComments = commentsSnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        setComments(fetchedComments);\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    };\n\n    if (id) {\n      fetchComments();\n    }\n  }, [id]);\n\n  const handleCommentSubmit = async event => {\n    event.preventDefault();\n    if (!comment.trim()) return;\n\n    try {\n      // Add comment to Firestore\n      const docRef = await addDoc(collection(db, `posts/${id}/comments`), {\n        text: comment,\n        timestamp: serverTimestamp()\n      });\n      console.log(\"Comment added with ID: \", docRef.id); // Log the ID of the added comment\n      // Clear comment input after successful submission\n\n      setComment(\"\");\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n    }\n  };\n\n  const handleCommentChange = event => {\n    setComment(event.target.value);\n  };\n\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this); // Display loading indicator while fetching data\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"description\",\n      children: post.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upvoteButton\",\n      onClick: updateUpvotes,\n      children: [\"Like: \", upvotes]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"commentSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleCommentSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"3\",\n          value: comment,\n          onChange: handleCommentChange,\n          placeholder: \"Add a comment...\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"commentsList\",\n        children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: comment.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: comment.timestamp.toDate().toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ViewPost, \"F62fqBS5NPPDD4rkNG2rjGf5/Lc=\", false, function () {\n  return [useParams];\n});\n\n_c = ViewPost;\nexport default ViewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewPost\");","map":{"version":3,"names":["React","useState","useEffect","useParams","doc","getDoc","updateDoc","collection","addDoc","serverTimestamp","query","orderBy","getDocs","db","ViewPost","id","post","setPost","upvotes","setUpvotes","comment","setComment","comments","setComments","fetchPostData","postDoc","exists","postData","data","console","log","error","fetchComments","commentsCollection","commentsQuery","commentsSnapshot","fetchedComments","docs","map","handleCommentSubmit","event","preventDefault","trim","docRef","text","timestamp","handleCommentChange","target","value","title","body","updateUpvotes","toDate","toLocaleString"],"sources":["/Users/zay/TwistedLiterature/client/src/pages/ViewPost.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { doc, getDoc, updateDoc, collection, addDoc, serverTimestamp, query, orderBy, getDocs } from \"firebase/firestore\";\nimport { db } from \"../config/firebase\";\n\nconst ViewPost = () => {\n  const { id } = useParams();\n  const [post, setPost] = useState(null);\n  const [upvotes, setUpvotes] = useState(0);\n  const [comment, setComment] = useState(\"\");\n  const [comments, setComments] = useState([]);\n\n  // Fetch post data and upvotes count based on ID from Firestore\n  useEffect(() => {\n    const fetchPostData = async () => {\n      try {\n        const postDoc = await getDoc(doc(db, \"posts\", id));\n        if (postDoc.exists()) {\n          const postData = postDoc.data();\n          setPost(postData);\n          setUpvotes(postData.upvotes); // Set upvotes count from database\n        } else {\n          console.log(\"No such document!\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching post data:\", error);\n      }\n    };\n\n    fetchPostData();\n  }, [id]); // Run effect whenever the ID parameter changes\n\n  // Fetch comments from Firestore and order them by date\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const commentsCollection = collection(db, `posts/${id}/comments`);\n        const commentsQuery = query(commentsCollection, orderBy(\"timestamp\", \"asc\"));\n        const commentsSnapshot = await getDocs(commentsQuery);\n        const fetchedComments = commentsSnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setComments(fetchedComments);\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    };\n\n    if (id) {\n      fetchComments();\n    }\n  }, [id]);\n\n  const handleCommentSubmit = async (event) => {\n    event.preventDefault();\n    if (!comment.trim()) return;\n\n    try {\n      // Add comment to Firestore\n      const docRef = await addDoc(collection(db, `posts/${id}/comments`), {\n        text: comment,\n        timestamp: serverTimestamp(),\n      });\n\n      console.log(\"Comment added with ID: \", docRef.id); // Log the ID of the added comment\n\n      // Clear comment input after successful submission\n      setComment(\"\");\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n    }\n  };\n\n  const handleCommentChange = (event) => {\n    setComment(event.target.value);\n  };\n\n  if (!post) {\n    return <div>Loading...</div>; // Display loading indicator while fetching data\n  }\n\n  return (\n    <div className=\"PostCard\">\n      <h2 className=\"title\">{post.title}</h2>\n      {/* <h3 className=\"author\">{\"by \" + post.authorId}</h3> */}\n      <p className=\"description\">{post.body}</p>\n      {/* <p className=\"datePosted\">{formattedDate(post.date)}</p> */}\n      <button className=\"upvoteButton\" onClick={updateUpvotes}>\n        Like: {upvotes}\n      </button>\n\n      {/* Comment section */}\n      <div className=\"commentSection\">\n        <h3>Comments</h3>\n        <form onSubmit={handleCommentSubmit}>\n          <textarea\n            rows=\"3\"\n            value={comment}\n            onChange={handleCommentChange}\n            placeholder=\"Add a comment...\"\n            required\n          ></textarea>\n          <button type=\"submit\">Submit</button>\n        </form>\n        <div className=\"commentsList\">\n          {comments.map((comment) => (\n            <div key={comment.id} className=\"comment\">\n              <p>{comment.text}</p>\n              <p>{comment.timestamp.toDate().toLocaleString()}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewPost;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}